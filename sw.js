/**
 * Service Worker –¥–ª—è KERATIN STUDIO
 * –ó–∞–±–µ–∑–ø–µ—á—É—î –∫–µ—à—É–≤–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ —Ç–∞ –±–∞–∑–æ–≤—É offline —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
 */

const CACHE_NAME = 'keratin-studio-v1.0.0';
const RUNTIME_CACHE = 'keratin-studio-runtime';

// –ö—Ä–∏—Ç–∏—á–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏ –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
const CORE_ASSETS = [
  '/',
  '/index.html',
  '/css/styles.css',
  '/js/app.js',
  '/content.json',
  '/manifest.json'
];

// –°—Ç–∞—Ç–∏—á–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏
const STATIC_ASSETS = [
  '/favicon.ico',
  '/apple-touch-icon.png'
];

// –ú–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ (–∫–µ—à—É—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ —á–µ—Ä–µ–∑ –≤–µ–ª–∏–∫—É –≤–∞–≥—É)
const MEDIA_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.webp', '.mp4', '.webm'];

/**
 * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Service Worker
 */
self.addEventListener('install', event => {
  console.log('SW: Installing...');
  
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('SW: Caching core assets');
        return cache.addAll(CORE_ASSETS);
      })
      .then(() => {
        // –§–æ—Ä—Å–æ–≤–∞–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ SW
        return self.skipWaiting();
      })
      .catch(error => {
        console.error('SW: Installation failed', error);
      })
  );
});

/**
 * –ê–∫—Ç–∏–≤–∞—Ü—ñ—è Service Worker
 */
self.addEventListener('activate', event => {
  console.log('SW: Activating...');
  
  event.waitUntil(
    caches.keys()
      .then(cacheNames => {
        // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∫–µ—à—ñ–≤
        return Promise.all(
          cacheNames
            .filter(cacheName => {
              return cacheName.startsWith('keratin-studio-') && 
                     cacheName !== CACHE_NAME && 
                     cacheName !== RUNTIME_CACHE;
            })
            .map(cacheName => {
              console.log('SW: Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            })
        );
      })
      .then(() => {
        // –®–≤–∏–¥–∫–µ –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª—é –Ω–∞–¥ –≤—Å—ñ–º–∞ –∫–ª—ñ—î–Ω—Ç–∞–º–∏
        return self.clients.claim();
      })
  );
});

/**
 * –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
 */
self.addEventListener('fetch', event => {
  const { request } = event;
  const url = new URL(request.url);
  
  // –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ-GET –∑–∞–ø–∏—Ç–∏ —Ç–∞ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ –¥–æ–º–µ–Ω–∏
  if (request.method !== 'GET' || url.origin !== location.origin) {
    return;
  }
  
  // –†—ñ–∑–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –∫–µ—à—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Ä–µ—Å—É—Ä—Å—É
  if (isHTMLRequest(request)) {
    event.respondWith(handleHTMLRequest(request));
  } else if (isStaticAsset(request)) {
    event.respondWith(handleStaticAsset(request));
  } else if (isMediaFile(request)) {
    event.respondWith(handleMediaFile(request));
  } else if (isAPIRequest(request)) {
    event.respondWith(handleAPIRequest(request));
  }
});

/**
 * –û–±—Ä–æ–±–∫–∞ HTML –∑–∞–ø–∏—Ç—ñ–≤ (Network First —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è)
 */
async function handleHTMLRequest(request) {
  try {
    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–∂—É –≤–µ—Ä—Å—ñ—é –∑ –º–µ—Ä–µ–∂—ñ
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —Å–≤—ñ–∂–æ—é –≤–µ—Ä—Å—ñ—î—é
      const cache = await caches.open(CACHE_NAME);
      cache.put(request, networkResponse.clone());
      return networkResponse;
    }
    
    throw new Error('Network response not ok');
  } catch (error) {
    // Fallback –¥–æ –∫–µ—à–æ–≤–∞–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
    console.log('SW: Network failed, serving from cache');
    const cachedResponse = await caches.match(request);
    
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // Offline fallback
    return new Response(
      generateOfflinePage(),
      {
        headers: { 'Content-Type': 'text/html' }
      }
    );
  }
}

/**
 * –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤ (Cache First —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è)
 */
async function handleStaticAsset(request) {
  const cachedResponse = await caches.match(request);
  
  if (cachedResponse) {
    return cachedResponse;
  }
  
  try {
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      const cache = await caches.open(CACHE_NAME);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.log('SW: Failed to fetch static asset:', request.url);
    return new Response('Asset not available offline', { status: 503 });
  }
}

/**
 * –û–±—Ä–æ–±–∫–∞ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤ (Cache First –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —Ä–æ–∑–º—ñ—Ä—É)
 */
async function handleMediaFile(request) {
  const cachedResponse = await caches.match(request);
  
  if (cachedResponse) {
    return cachedResponse;
  }
  
  try {
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      const cache = await caches.open(RUNTIME_CACHE);
      
      // –ö–µ—à—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–µ–≤–µ–ª–∏–∫—ñ —Ñ–∞–π–ª–∏ (–¥–æ 5MB)
      const contentLength = networkResponse.headers.get('content-length');
      if (!contentLength || parseInt(contentLength, 10) < 5 * 1024 * 1024) {
        cache.put(request, networkResponse.clone());
      }
    }
    
    return networkResponse;
  } catch (error) {
    console.log('SW: Failed to fetch media file:', request.url);
    return new Response('Media not available offline', { status: 503 });
  }
}

/**
 * –û–±—Ä–æ–±–∫–∞ API –∑–∞–ø–∏—Ç—ñ–≤ (Network First –∑ –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º)
 */
async function handleAPIRequest(request) {
  try {
    // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 3000);
    
    const networkResponse = await fetch(request, {
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    
    if (networkResponse.ok) {
      const cache = await caches.open(RUNTIME_CACHE);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.log('SW: API request failed, trying cache');
    const cachedResponse = await caches.match(request);
    
    if (cachedResponse) {
      return cachedResponse;
    }
    
    return new Response(
      JSON.stringify({ error: 'Data not available offline' }),
      {
        status: 503,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
}

/**
 * –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –∑–∞–ø–∏—Ç—É
 */
function isHTMLRequest(request) {
  return request.destination === 'document' || 
         request.headers.get('accept')?.includes('text/html');
}

function isStaticAsset(request) {
  return request.destination === 'style' || 
         request.destination === 'script' ||
         request.destination === 'font' ||
         request.url.includes('/css/') ||
         request.url.includes('/js/') ||
         request.url.includes('/fonts/');
}

function isMediaFile(request) {
  return request.destination === 'image' || 
         request.destination === 'video' ||
         MEDIA_EXTENSIONS.some(ext => request.url.includes(ext));
}

function isAPIRequest(request) {
  return request.url.includes('.json') || 
         request.url.includes('/api/');
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è offline —Å—Ç–æ—Ä—ñ–Ω–∫–∏
 */
function generateOfflinePage() {
  return `
    <!DOCTYPE html>
    <html lang="uk">
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <title>KERATIN STUDIO ‚Äî Offline</title>
      <style>
        body {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
          background: linear-gradient(135deg, #0b0b0f, #1a1a2e);
          color: #f7f8fc;
          margin: 0;
          padding: 0;
          min-height: 100vh;
          display: flex;
          align-items: center;
          justify-content: center;
          text-align: center;
        }
        .offline-container {
          max-width: 500px;
          padding: 2rem;
        }
        .offline-icon {
          font-size: 4rem;
          margin-bottom: 1rem;
        }
        h1 {
          color: #c9ff7b;
          margin-bottom: 1rem;
          font-size: 2rem;
        }
        p {
          line-height: 1.6;
          margin-bottom: 2rem;
          opacity: 0.9;
        }
        .retry-btn {
          background: linear-gradient(90deg, #c9ff7b, #9ad5ff);
          color: #0b0b0f;
          border: none;
          padding: 1rem 2rem;
          border-radius: 999px;
          font-weight: 700;
          cursor: pointer;
          font-size: 1rem;
          transition: transform 0.2s ease;
        }
        .retry-btn:hover {
          transform: translateY(-2px);
        }
        .contact-info {
          margin-top: 2rem;
          padding-top: 2rem;
          border-top: 1px solid rgba(255,255,255,0.1);
        }
        a {
          color: #c9ff7b;
          text-decoration: none;
        }
      </style>
    </head>
    <body>
      <div class="offline-container">
        <div class="offline-icon">üì±</div>
        <h1>KERATIN STUDIO</h1>
        <p>–°—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ê–ª–µ –Ω–µ —Ö–≤–∏–ª—é–π—Ç–µ—Å—è ‚Äî –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –Ω–∞–º –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑!</p>
        <button class="retry-btn" onclick="window.location.reload()">
          –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
        </button>
        <div class="contact-info">
          <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> <a href="tel:+380637027770">+380 63 702 77 70</a></p>
          <p><strong>–ê–¥—Ä–µ—Å–∞:</strong> –≤—É–ª. –î–µ—Ä–∏–±–∞—Å—ñ–≤—Å—å–∫–∞, 1, –û–¥–µ—Å–∞</p>
        </div>
      </div>
    </body>
    </html>
  `;
}

/**
 * –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É
 */
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

/**
 * Background Sync –¥–ª—è offline —Ñ–æ—Ä–º (—è–∫—â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è)
 */
if ('sync' in self.registration) {
  self.addEventListener('sync', event => {
    if (event.tag === 'contact-form') {
      event.waitUntil(syncContactForm());
    }
  });
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
 */
async function syncContactForm() {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏ –∑ IndexedDB –∞–±–æ localStorage
    const formData = await getStoredFormData();
    
    if (formData) {
      const response = await fetch('/submit-form', {
        method: 'POST',
        body: formData
      });
      
      if (response.ok) {
        // –û—á–∏—â—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        await clearStoredFormData();
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É
        self.registration.showNotification('–§–æ—Ä–º–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!', {
          body: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú–∏ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.',
          icon: '/icon-192.png',
          badge: '/badge-72.png'
        });
      }
    }
  } catch (error) {
    console.error('SW: Failed to sync form data', error);
  }
}

/**
 * –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–æ—Ä–º–∞–º–∏ (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏)
 */
async function getStoredFormData() {
  // –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –æ–±—Ä–∞–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±—É –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
  return null;
}

async function clearStoredFormData() {
  // –û—á–∏—â–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
}

console.log('SW: Service Worker loaded');