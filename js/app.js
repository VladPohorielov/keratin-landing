
// Mini CMS loader
const state = { data: null, activeLengths: {} };

const $ = (sel, root=document) => root.querySelector(sel);
const $$ = (sel, root=document) => [...root.querySelectorAll(sel)];

async function loadContent(){
  const res = await fetch('content.json');
  state.data = await res.json();
  bindBrand();
  buildAbout();
  buildServices();
  buildSEO();
  buildGallery();
  buildTestimonials();
  buildCerts();
  buildProcess();
  buildFAQ();
  buildContact();
  initUI();
}
function bindBrand(){
  $('#brandName').textContent = state.data.brand.name;
  $('#brandNameFooter').textContent = state.data.brand.name;
  $('#year').textContent = new Date().getFullYear();

  const v = $('#heroVideo');
  v.src = state.data.hero.video;
  v.poster = state.data.hero.poster;
  $('#heroHeadline').textContent = state.data.hero.headline;
  $('#heroSub').textContent = state.data.hero.sub;
  $('#ctaPrimary').textContent = state.data.hero.ctaPrimary;
  $('#ctaSecondary').textContent = state.data.hero.ctaSecondary;
  
  // Footer contacts and social
  const footerContacts = $('#footerContacts');
  const footerSocial = $('#footerSocial');
  const b = state.data.brand;
  
  if(footerContacts) {
    footerContacts.innerHTML = `
      <p><a href="tel:${b.phone}">${b.phone}</a></p>
      <p>${b.city}</p>
    `;
  }
  
  if(footerSocial) {
    footerSocial.innerHTML = `
      <a href="${b.instagram}" target="_blank" rel="me noopener">Instagram</a><br>
      <a href="${b.telegram}" target="_blank" rel="me noopener">Telegram</a><br>
      <a href="${b.whatsapp}" target="_blank" rel="me noopener">WhatsApp</a>
    `;
  }
}

function currency(n){ return new Intl.NumberFormat('uk-UA').format(n); }

// –í–ò–ü–†–ê–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø –í–Ü–î–ü–†–ê–í–ö–ò –§–û–†–ú–ò
async function handleFormSubmit(e) {
  e.preventDefault();
  
  const form = e.target;
  const submitBtn = $('#submit-btn');
  const formStatus = $('#form-status');
  
  console.log('üìù –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º–∏...');
  
  // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  submitBtn.disabled = true;
  const btnText = submitBtn.querySelector('.btn-text');
  const btnSpinner = submitBtn.querySelector('.btn-spinner');
  
  if (btnText) btnText.textContent = '–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ...';
  if (btnSpinner) btnSpinner.style.display = 'inline-block';
  
  try {
    const formData = new FormData(form);
    
    const response = await fetch(form.action, {
      method: 'POST',
      body: formData,
      headers: {
        'Accept': 'application/json'
      }
    });
    
    if (response.ok) {
      console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞');
      
      // –ü–æ–∫–∞–∑—É—î–º–æ —É—Å–ø—ñ—à–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      if (formStatus) {
        formStatus.className = 'form-status success';
        formStatus.textContent = '‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞. –ó–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.';
        formStatus.style.display = 'block';
      }
      
      // –°–∫–∏–¥–∞—î–º–æ —Ñ–æ—Ä–º—É
      form.reset();
      
      // –•–æ–≤–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        if (formStatus) formStatus.style.display = 'none';
      }, 8000);
      
    } else {
      throw new Error('Network response was not ok');
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏:', error);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
    if (formStatus) {
      formStatus.className = 'form-status error';
      formStatus.textContent = '‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤\'—è–∂—ñ—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º +380637027770.';
      formStatus.style.display = 'block';
    }
  } finally {
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
    submitBtn.disabled = false;
    if (btnText) btnText.textContent = '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏';
    if (btnSpinner) btnSpinner.style.display = 'none';
  }
}

function buildServices(){
  const wrap = $('#servicesGrid');
  wrap.innerHTML = '';
  state.data.services.forEach((svc, idx)=>{
    const card = document.createElement('div');
    card.className = 'card reveal-up';
    const lengths = svc.lengthOptions.map((o,i)=>`
      <button data-svc="${idx}" data-idx="${i}" class="len-btn ${i===0?'active':''}"
              aria-pressed="${i===0?'true':'false'}">${o.label}</button>
    `).join('');
    const perks = svc.perks.map(p=>`<span class="tag">${p}</span>`).join('');
    card.innerHTML = `
      <h3>${svc.title}</h3>
      <p>${svc.desc}</p>
      <div class="tag-row">${perks}</div>
      <div class="lengths" role="group" aria-label="–î–æ–≤–∂–∏–Ω–∞">${lengths}</div>
      <div class="price">‚Ç¥ <span class="price-val">${currency(svc.lengthOptions[0].price)}</span></div>
      <div class="meta">–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <span class="time-val">${svc.lengthOptions[0].time}</span></div>
      <div class="cta-wrap"><a href="#contact" class="btn small">–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è</a></div>
    `;
    wrap.appendChild(card);
  });

  // Interactions
  wrap.addEventListener('click',(e)=>{
    const btn = e.target.closest('button[data-svc]');
    if(!btn) return;
    const card = btn.closest('.card');
    card.querySelectorAll('.len-btn').forEach(b=>{
      b.classList.toggle('active', b===btn);
      b.setAttribute('aria-pressed', b===btn ? 'true':'false');
    });
    const svc = state.data.services[+btn.dataset.svc];
    const opt = svc.lengthOptions[+btn.dataset.idx];
    card.querySelector('.price-val').textContent = currency(opt.price);
    card.querySelector('.time-val').textContent = opt.time;
  });
}

function buildAbout(){
  const a = state.data.about; 
  if(!a) return;
  
  const photo = $('#aboutPhoto');
  const title = $('#aboutTitle');
  const body = $('#aboutBody');
  
  if(photo) photo.src = a.photo;
  if(title) title.textContent = a.title;
  if(body && a.html) {
    // sanitize HTML
    const t = document.createElement('template'); 
    t.innerHTML = a.html; 
    t.content.querySelectorAll('script').forEach(s=>s.remove());
    body.innerHTML = t.innerHTML;
  }
}

function sanitizeHTML(html){
  const t = document.createElement('template');
  t.innerHTML = html;
  t.content.querySelectorAll('script').forEach(s=>s.remove());
  return t.innerHTML;
}

function buildSEO(){
  const host = document.getElementById('seoMount');
  if(!host || !state.data.seoTexts) return;
  host.innerHTML = '';
  state.data.seoTexts.forEach(block=>{
    const card = document.createElement('article');
    card.className = 'seo-card reveal-up';
    card.innerHTML = `
      <h2 class="seo-title">${block.h2}</h2>
      <div class="seo-body">${sanitizeHTML(block.html)}</div>
    `;
    host.appendChild(card);
  });
}

function buildGallery(){
  const grid = $('#galleryGrid');
  if(!grid) return;
  grid.innerHTML = '';
  state.data.gallery.items.forEach(item=>{
    const div = document.createElement('div');
    div.className = 'masonry-item reveal-up';
    if(item.type==='image'){
      div.innerHTML = `<img src="${item.src}" alt="${item.alt || ''}" loading="lazy" decoding="async" width="400" height="600">`;
    } else {
      div.innerHTML = `<video src="${item.src}" ${item.poster?`poster="${item.poster}"`:''} controls muted preload="metadata" width="400" height="600"></video>`;
    }
    grid.appendChild(div);
  });
}

function buildTestimonials(){
  const car = $('#testimonialsCarousel');
  car.innerHTML='';
  state.data.testimonials.forEach(t=>{
    const el = document.createElement('article');
    el.className = 'review reveal-up';
    el.innerHTML = `<div class="name">${t.name}</div>
      <div class="stars">${'‚òÖ'.repeat(t.rating)}${'‚òÜ'.repeat(5-t.rating)}</div>
      <p>${t.text}</p>`;
    car.appendChild(el);
  });
}

function buildCerts(){
  const strip = $('#certsStrip');
  strip.innerHTML = '';
  state.data.certificates.forEach(c=>{
    const el = document.createElement('figure');
    el.className = 'cert reveal-up';
    el.innerHTML = `<img src="${c.img}" alt="${c.title}"><figcaption style="padding:10px">${c.title}</figcaption>`;
    strip.appendChild(el);
  });
}

function buildProcess(){
  const wrap = $('#processSteps');
  wrap.innerHTML = '';
  state.data.process.forEach((s,i)=>{
    const el = document.createElement('div');
    el.className = 'step reveal-up';
    el.innerHTML = `<div class="tag">–ö—Ä–æ–∫ ${i+1}</div><h4>${s.title}</h4><p>${s.text}</p>`;
    wrap.appendChild(el);
  });
}

function buildFAQ(){
  const list = $('#faqList');
  list.innerHTML = '';
  state.data.faq.forEach((qa, index)=>{
    const item = document.createElement('div');
    item.className = 'item';
    item.innerHTML = `
      <h3>
        <button class="faq-toggle" aria-expanded="false" aria-controls="faq-${index}">
          ${qa.q}
        </button>
      </h3>
      <div id="faq-${index}" class="answer" hidden>
        ${qa.a}
      </div>
    `;
    list.appendChild(item);
  });
  
  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—ñ–≤ –¥–ª—è –∞–∫–æ—Ä–¥–µ–æ–Ω—É
  list.addEventListener('click', (e)=>{
    const btn = e.target.closest('.faq-toggle'); 
    if(!btn) return;
    
    const item = btn.closest('.item');
    const answer = item.querySelector('.answer');
    const isOpen = btn.getAttribute('aria-expanded') === 'true';
    
    // –ó–∞–∫—Ä–∏—Ç–∏ —ñ–Ω—à—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ (optional - only-one-open)
    list.querySelectorAll('.item.open').forEach(openItem => {
      if(openItem !== item) {
        openItem.classList.remove('open');
        openItem.querySelector('.faq-toggle').setAttribute('aria-expanded', 'false');
        openItem.querySelector('.answer').hidden = true;
      }
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
    if(isOpen) {
      item.classList.remove('open');
      btn.setAttribute('aria-expanded', 'false');
      answer.hidden = true;
    } else {
      item.classList.add('open');
      btn.setAttribute('aria-expanded', 'true');
      answer.hidden = false;
    }
  });
  
  // –û–±—Ä–æ–±–Ω–∏–∫ Escape –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
  list.addEventListener('keydown', (e) => {
    if(e.key === 'Escape') {
      const openBtn = list.querySelector('.faq-toggle[aria-expanded="true"]');
      if(openBtn) {
        const item = openBtn.closest('.item');
        const answer = item.querySelector('.answer');
        item.classList.remove('open');
        openBtn.setAttribute('aria-expanded', 'false');
        answer.hidden = true;
        openBtn.focus();
      }
    }
  });
}

function buildContact(){
  const ul = $('#contactList');
  const b = state.data.brand;
  ul.innerHTML = `
    <li><strong>–ú–∞–π—Å—Ç–µ—Ä:</strong> ${b.master}, ${b.city}</li>
    <li><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> <a href="tel:${b.phone}">${b.phone}</a></li>
    <li><a href="${b.whatsapp}" target="_blank" rel="noopener">WhatsApp</a> ‚Ä¢ 
        <a href="${b.telegram}" target="_blank" rel="noopener">Telegram</a> ‚Ä¢ 
        <a href="${b.instagram}" target="_blank" rel="noopener">Instagram</a></li>
  `;
}

function initUI(){
  // mobile menu
  const ham = $('.hamburger');
  ham.addEventListener('click', ()=>{
    $('.nav').style.display = $('.nav').style.display === 'flex' ? 'none':'flex';
  });

  // reveal on scroll
  const io = new IntersectionObserver(entries=>{
    entries.forEach(en=>{
      if(en.isIntersecting){ en.target.classList.add('revealed'); io.unobserve(en.target); }
    });
  }, {threshold:.2});
  $$('.reveal-up').forEach(el=>io.observe(el));

  // –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –§–û–†–ú–ò - –í–ò–ü–†–ê–í–õ–ï–ù–û
  const contactForm = $('#contactForm');
  if (contactForm) {
    console.log('üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏...');
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ timestamp –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ —Å–ø–∞–º—É
    const timestampField = $('#form-timestamp');
    if (timestampField) {
      timestampField.value = Date.now().toString();
    }
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
    contactForm.addEventListener('submit', handleFormSubmit);
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—ñ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
    const fields = contactForm.querySelectorAll('input[required], textarea[required]');
    fields.forEach(field => {
      field.addEventListener('input', () => {
        field.dataset.touched = 'true';
        validateField(field);
        updateSubmitButton();
      });
      field.addEventListener('blur', () => validateField(field));
    });
    
    console.log('‚úÖ –§–æ—Ä–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
  }
}

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—è
function validateField(field) {
  const value = field.value.trim();
  const errorEl = document.getElementById(field.getAttribute('aria-describedby'));
  let isValid = true;
  let errorMessage = '';

  if (field.hasAttribute('required') && !value) {
    isValid = false;
    errorMessage = "–¶–µ –ø–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ";
  } else if (value && field.type === 'tel') {
    const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/;
    if (!phoneRegex.test(value)) {
      isValid = false;
      errorMessage = '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É';
    }
  }

  field.classList.toggle('is-valid', isValid && field.dataset.touched === 'true');
  field.classList.toggle('is-invalid', !isValid && field.dataset.touched === 'true');

  if (errorEl) {
    errorEl.textContent = errorMessage;
  }

  return isValid;
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
function updateSubmitButton() {
  const form = $('#contactForm');
  const submitBtn = $('#submit-btn');
  if (!form || !submitBtn) return;

  const requiredFields = form.querySelectorAll('input[required], textarea[required]');
  const allValid = Array.from(requiredFields).every(field => {
    return field.value.trim() && validateField(field);
  });

  submitBtn.disabled = !allValid;
}

document.addEventListener('DOMContentLoaded', loadContent);
